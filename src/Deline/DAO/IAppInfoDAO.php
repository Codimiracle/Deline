<?php
/**
 * Created by PhpStorm.
 * User: codimiracle
 * Date: 18-1-22
 * Time: 下午9:42
 */

namespace CAstore\DAO;

use CAstore\Entity\AppInfo;
use PDOException;

class IAppInfoDAO extends AbstractDAO implements AppInfoDAO
{
    const INSERT_CONTENT = "INSERT INTO content(title, name, content) VALUES (:title, :name, :description)";
    const INSERT_APP = "INSERT INTO app(cid, package, developer, platform, version) VALUES (:cid, :package, :developer, :platform, :version)";

    const DELETE_CONTENT = "DELETE FROM content WHERE id = (SELECT cid FROM app WHERE id = :id)";
    const DELETE_APP = "DELETE FROM app WHERE id = :id";

    const UPDATE_CONTENT = "UPDATE content SET title = :title, name = :name, content = :description WHERE id = (SELECT cid FROM app WHERE id = :id)";
    const UPDATE_APP = "UPDATE app SET package = :package, developer = :developer, platform = :platform, version = :version WHERE id = :id";

    const QUERY = "SELECT * FROM app_info";
    const QUERY_BY_TAG = self::QUERY." WHERE EXISTS (SELECT 1 FROM tag, app WHERE app.cid = tag.cid AND app.id = app_info.id AND tag.name LIKE concat('%',replace(:tag, ' ', '%'), '%'))";
    const QUERY_BY_DEVELOPER = self::QUERY." WHERE developer LIKE concat('%',replace(:developer, ' ', '%'), '%'))";
    const QUERY_BY_PACKAGE = self::QUERY." WHERE package LIKE concat('%',replace(:package, ' ', '%'), '%'))";
    const QUERY_BY_KEYWORD = self::QUERY." WHERE name LIKE concat('%',replace(:keyword, ' ', '%'), '%')) OR package LIKE concat('%',replace(:keyword, ' ', '%'), '%')) OR developer LIKE concat('%',replace(:keyword, ' ', '%'), '%')) OR EXISTS (SELECT 1 FROM tag, app WHERE app.cid = tag.cid AND app.id = app_info.id AND tag.name LIKE concat('%',replace(:tag, ' ', '%'), '%'))";
    const QUERY_BY_ID = self::QUERY." WHERE id = :id";

    /**
     * @return AppInfo
     */
    public function getTarget()
    {
        return parent::getTarget(); // TODO: Change the autogenerated stub
    }

    public function insert()
    {
        $connection = $this->getDataSource()->getConnection();
        try {
            $connection->beginTransaction();
            $prepared = $connection->prepare(self::INSERT_CONTENT);
            $prepared->bindValue(":title", $this->getTarget()->getTitle());
            $prepared->bindValue(":name", $this->getTarget()->getName());
            $prepared->bindValue(":description", $this->getTarget()->getDescription());
            $prepared->execute();
            $inserted_id = $connection->lastInsertId("id");
            $prepared = $connection->prepare(self::INSERT_APP);
            $prepared->bindValue(":cid", $inserted_id);
            $prepared->bindValue(":package", $this->getTarget()->getPackage());
            $prepared->bindValue(":developer", $this->getTarget()->getDeveloper());
            $prepared->bindValue(":platform", $this->getTarget()->getPlatform());
            $prepared->bindValue(":version", $this->getTarget()->getVersion());
            $prepared->execute();
            $connection->commit();
        } catch (PDOException $e) {
            $connection->rollBack();
            throw $e;
        }
    }

    public function delete()
    {
        $connection = $this->getDataSource()->getConnection();
        try {
            $connection->beginTransaction();
            foreach (array(self::DELETE_CONTENT, self::DELETE_APP) as $sentence) {
                $prepared = $connection->prepare($sentence);
                $prepared->bindValue(":id", $this->getTarget()->getId());
                $prepared->execute();
            }
            $connection->commit();
        } catch (PDOException $e) {
            $connection->rollBack();
            throw $e;
        }
    }

    public function update()
    {
        $connection = $this->getDataSource()->getConnection();
        $connection->beginTransaction();
        try {
            $prepared = $connection->prepare(self::UPDATE_CONTENT);
            $prepared->bindValue(":title", $this->getTarget()->getTitle());
            $prepared->bindValue(":name", $this->getTarget()->getName());
            $prepared->bindValue(":description", $this->getTarget()->getDescription());
            $prepared->bindValue("id", $this->getTarget()->getId());
            $prepared->execute();
            $prepared = $connection->prepare(self::UPDATE_APP);
            $prepared->bindValue(":package", $this->getTarget()->getPackage());
            $prepared->bindValue(":platform", $this->getTarget()->getPlatform());
            $prepared->bindValue(":developer", $this->getTarget()->getDeveloper());
            $prepared->bindValue(":version", $this->getTarget()->getVersion());
            $prepared->bindValue(":id", $this->getTarget()->getId());
            $prepared->execute();
            $connection->commit();
        } catch (PDOException $e) {
            $connection->rollBack();
            throw $e;
        }
    }

    public function query()
    {
        return $this->getEntities(self::QUERY, array(), AppInfo::class);
    }

    public function queryById($id)
    {
        return $this->getEntity(self::QUERY_BY_ID, array(":id" => $id), AppInfo::class);
    }

    public function queryByTag($tag)
    {
        return $this->getEntities(self::QUERY_BY_TAG, array(":tag"=>$tag), AppInfo::class);
    }

    public function queryByDeveloper($developer)
    {
        return $this->getEntities(self::QUERY_BY_DEVELOPER, array(":developer" => $developer), AppInfo::class);
    }

    public function queryByKeyword($keyword)
    {
        return $this->getEntities(self::QUERY_BY_KEYWORD, array(":keyword" => $keyword), AppInfo::class);
    }


    public function queryByPackage($package)
    {
        return $this->getEntities(self::QUERY_BY_PACKAGE, array(":package" => $package), AppInfo::class);
    }
}